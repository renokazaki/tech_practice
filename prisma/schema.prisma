generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String          @id @default(cuid())
  userId                 String          @unique // ClerkのuserIdを一意に設定
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  name                   String
  img                    String
  tasks                  Task[] // ユーザーが持つタスク
  category               Category[] // ユーザーが持つカテゴリ
  // 友達関係の追加
  sentFriendRequests     FriendRequest[] @relation("SentRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedRequests")
  friends                Friend[]        @relation("UserFriends")
  friendsOf              Friend[]        @relation("FriendsOfUser")
}

model Task {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  emergency   String
  status      String
  description String
  user        User     @relation(fields: [userId], references: [userId])
  userId      String // Userモデルとの外部キー
  category    Category @relation(fields: [categoryId], references: [id]) // idを参照するように変更
  categoryId  String // Categoryのidを参照
}

model Category {
  id     String @id @default(cuid()) // idをcuidで自動生成するように変更
  name   String // 'all' などのカテゴリ名を保存
  userId String
  user   User   @relation(fields: [userId], references: [userId])
  tasks  Task[]

  @@unique([name, userId]) // nameとuserIdの組み合わせでユニーク制約
}

// 友達申請モデル
model FriendRequest {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  status     String   @default("pending") // pending, accepted, rejected
  senderId   String
  sender     User     @relation("SentRequests", fields: [senderId], references: [id])
  receiverId String
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

// 友達関係モデル
model Friend {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation("UserFriends", fields: [userId], references: [id])
  friendId  String
  friend    User     @relation("FriendsOfUser", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}
